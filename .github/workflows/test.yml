name: test

on: [pull_request]

env:
  PATH_CACHE: /tmp/docker-img-arch

jobs:
  pytest:
    name: pytest
    runs-on: ubuntu-latest
    steps:
        - name: Checkout source repository                                  
          uses: actions/checkout@v2

        - name: Download state src
          run: |
            curl -H "Authorization: token ${STATE_SRC_TOKEN} " \
              -H 'Accept: application/vnd.github.v3.raw' \
              -O \
              -L https://api.github.com/repos/uedar/state-private/contents/state-5.6.10.tgz
          env: 
            STATE_SRC_TOKEN: ${{ secrets.STATE_SRC_TOKEN }}
      
        - name: Create image tag
          id: imagetag
          run: |
            HASH_IMAGE=${{ hashFiles('./Dockerfile') }}
            VARIANT=$(TZ=UTC-9 date '+%Y%m')${HASH_IMAGE:0:7}
            NAME_IMAGE=state-interface
            TAG="${NAME_IMAGE}:${VARIANT}"
            NAME_TAR="${NAME_IMAGE}.${VARIANT}.tar"
            PATH_TAR=${{ env.PATH_CACHE }}"/${NAME_TAR}"
            echo "::set-output name=TAG::${TAG}"
            echo "::set-output name=PATH_TAR::${PATH_TAR}"
  
        - name: Enable cache
          id: cache
          uses: actions/cache@v2
          with:
            path: ${{ env.PATH_CACHE }}
            key: ${{ steps.imagetag.outputs.TAG }}

        - name: Load Docker image if exists
          if: steps.cache.outputs.cache-hit == 'true'
          run: docker load --input ${{ steps.imagetag.outputs.PATH_TAR }}
  
        - name: Build Docker image and save
          if: steps.cache.outputs.cache-hit != 'true'
          run: |
            mkdir -p ${{ env.PATH_CACHE }}
            docker build -f './Dockerfile' -t ${{ steps.imagetag.outputs.TAG }} .
            docker save --output ${{ steps.imagetag.outputs.PATH_TAR }} ${{ steps.imagetag.outputs.TAG }}
        
        - name: Run tests
          run: |
            docker run -u root -e OMPI_MCA_btl_vader_single_copy_mechanism=none -v "$(pwd)":/ase-state-interface -w /ase-state-interface ${{ steps.imagetag.outputs.TAG }} pytest

  flake8-lint:
    runs-on: ubuntu-latest
    name: flake8
    steps:
      - name: Check out source repository
        uses: actions/checkout@v2
      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.10"
      - name: flake8 Lint
        uses: reviewdog/action-flake8@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          reporter: github-pr-review
          fail_on_error: true
          flake8_args: "--max-line-length 119"
